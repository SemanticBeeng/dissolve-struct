{"name":"dissolve-struct","tagline":"Distributed solver library for structured output prediction, based on Spark.","body":"[![Build Status](https://travis-ci.org/dalab/dissolve-struct.svg?branch=tuning)](https://travis-ci.org/dalab/dissolve-struct)\r\n[![Release status](https://img.shields.io/badge/release-v0.1-orange.svg)](https://github.com/dalab/dissolve-struct/releases)\r\n\r\ndissolve<sup>struct</sup>\r\n===========\r\n\r\nDistributed solver library for structured output prediction, based on Spark.\r\n\r\nThe library is based on the primal-dual BCFW solver, allowing approximate inference oracles, and distributes this algorithm using the recent communication efficient CoCoA scheme.\r\nThe interface to the user is the same as in the widely used SVM<sup>struct</sup> in the single machine case.\r\n\r\n# Usage\r\n\r\n#### Checkout the project repository\r\n\r\n\tgit clone https://github.com/dalab/dissolve-struct.git\r\n\r\n## Running the examples\r\n\r\nObtain the datasets using:\r\n```bash\r\ncd data\r\nbash retrieve_datasets.sh\r\npython convert-ocr-data.py\r\n```\r\n(you might have to install `brew install sbt` and `brew install wget` first if on a mac. Additionally, `pip -r requirements.txt` to obtain the python dependencies.)\r\n\r\nThe library and examples packages need to be built and packaged to execute the examples.\r\nThis can be done in two ways.\r\n\r\n##### Build locally using sbt (Recommended)\r\nBuild the solver package first:\r\n```bash\r\ncd dissolve-struct-lib\r\nsbt publish-local\r\n```\r\nFollowed by building the example package:\r\n```bash\r\ncd dissolve-struct-examples\r\nsbt package\r\n```\r\n\r\n##### Obtain packaged binaries\r\n\r\nThe binaries for both the solver and the examples package can be obtained at the [releases](https://github.com/dalab/dissolve-struct/releases) page.\r\n\r\nBut be warned, these binaries might not be up-to-date since the project is still in the development stage.\r\n\r\n### Executing through command line\r\nDownload the [pre-build binary package of Spark](http://spark.apache.org/downloads.html). Here for example we assume the Spark folder is named `spark-1.2.0`.\r\n\r\n##### Binary classification Example\r\nTraining a binary SVM locally from the command-line is done as follows, here for the Forest Cover (COV) dataset. Within `dissolve-struct-examples` directory, run\r\n```bash\r\nspark-1.2.0/bin/spark-submit --jars ../dissolve-struct-lib/target/scala-2.10/dissolvestruct_2.10-0.1-SNAPSHOT.jar --class \"ch.ethz.dalab.dissolve.examples.binaryclassification.COVBinary\" --master local --driver-memory 2G target/scala-2.10/dissolvestructexample_2.10-0.1-SNAPSHOT.jar\r\n```\r\n\r\n##### Sequence Prediction with OCR data\r\nTraining a chain structured SVM model on the [OCR dataset](http://www.seas.upenn.edu/~taskar/ocr/). This example uses the Viterbi algorithm for the decoding oracle:\r\n```bash\r\nspark-1.2.0/bin/spark-submit --jars ../dissolve-struct-lib/target/scala-2.10/dissolvestruct_2.10-0.1-SNAPSHOT.jar --class \"ch.ethz.dalab.dissolve.examples.chain.ChainDemo\" --master local --driver-memory 2G target/scala-2.10/dissolvestructexample_2.10-0.1-SNAPSHOT.jar\r\n```\r\n\r\nHere is the same example using more general Belief Propagation, by employing the [Factorie library](http://factorie.cs.umass.edu/) (Requires [Factorie 1.0 Jar](https://github.com/factorie/factorie/releases) to be placed within `dissolve-struct-examples/lib` directory):\r\n```bash\r\nspark-1.2.0/bin/spark-submit --jars ../dissolve-struct-lib/target/scala-2.10/dissolvestruct_2.10-0.1-SNAPSHOT.jar,lib/factorie-1.0.jar --class \"ch.ethz.dalab.dissolve.examples.chain.ChainBPDemo\" --master local --driver-memory 2G target/scala-2.10/dissolvestructexample_2.10-0.1-SNAPSHOT.jar\r\n```\r\n\r\n### Executing within Eclipse\r\nTo ease debugging and development, the examples can directly be run within Eclipse by `Run As | Scala Application`. This does not require Spark binaries. See the section below how to set up the environment.\r\n\r\nWithin Eclipse, Spark can only be run in local mode since all the interactions need to be visible to Eclipse.\r\nIn order to enable this, the `SparkContext` needs to be initialized by setting the master to `local`:\r\n```scala\r\nval conf = new SparkConf()\r\n\t       .setAppName(\"COV-example\")\r\n\t       .setMaster(\"local[4]\")\r\n```\r\n\r\n## Setting up a development environment\r\nTo import the packages in [Eclipse for Scala](http://scala-ide.org/download/sdk.html), the respective .classpath files needs to be generated for the `dissolve-struct-lib`:\r\n```bash\r\ncd dissolve-struct-lib\r\nsbt eclipse\r\n```\r\nSimilarly, for `dissolve-struct-examples` package too:\r\n```bash\r\ncd dissolve-struct-examples\r\nsbt eclipse\r\n```\r\nThe above packages can be imported individually into Eclipse using: `File | Import | Existing Projects into Workspace`. Make sure you have `search for nested projects` checked, so you'll have the choice to select both the `dissolve-struct-lib` and `dissolve-struct-examples` projects, if desired.\r\n\r\nCurrently Scala 2.10.4 is required by Spark. If Eclipse defaults to Scala 2.11 instead, this can cause an error \"cross-compiled with an incompatible version of Scala\".\r\nThe correct version needs to be set for both the projects by:\r\n`Project Properties | Scala Compiler | Setting \"Scala Installation\" to \"Latest 2.10 bundle\"`.\r\nAlternatively, we recommend directly working with Eclipse IDE for Scala 2.10.4 from <http://scala-ide.org/download/sdk.html>.\r\n\r\n## References\r\nThe CoCoA algorithmic framework is described in the following paper:\r\n\r\n * _Jaggi, M., Smith, V., Takac, M., Terhorst, J., Krishnan, S., Hofmann, T., & Jordan, M. I. (2014) [Communication-Efficient Distributed Dual Coordinate Ascent](http://papers.nips.cc/paper/5599-communication-efficient-distributed-dual-coordinate-ascent) (pp. 3068â€“3076). NIPS 2014 - Advances in Neural Information Processing Systems 27._\r\n\r\n  see also the binary classification and regression [spark code here](https://github.com/gingsmith/cocoa).\r\n\r\nThe (single machine) BCFW algorithm for structured prediction is described in the following paper:\r\n\r\n * _Lacoste-Julien, S., Jaggi, M., Schmidt, M., & Pletscher, P. (2013) [Block-Coordinate Frank-Wolfe Optimization for Structural SVMs](http://jmlr.org/proceedings/papers/v28/lacoste-julien13). ICML 2013 - Proceedings of the 30th International Conference on Machine Learning._\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}